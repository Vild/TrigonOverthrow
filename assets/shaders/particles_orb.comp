#version 440 core
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout (std430, binding = 0) buffer PositionBuffer {
		vec3 positions[];
};

layout (std430, binding = 1) buffer VelocityBuffer {
		vec3 velocities[];
};

layout (std430, binding = 2) buffer LifeBuffer {
	float lives[];
};

layout (std430, binding = 3) buffer ColorBuffer {
	vec3 colors[];
};


uniform float delta;
uniform vec3 spawnPos;

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main(){
	uint index = gl_GlobalInvocationID.x;
	vec3 pos = positions[index];
	vec3 vel = velocities[index];
	vec3 color = colors[index];
	float life = lives[index];

	if(life <= 0){
		pos = spawnPos + normalize(vec3(sin(3 * index), 0, cos(index * 0.5f) - sin(8 * index) + sin(3 * index)) * delta);
		vel = vec3(0, 1, 0);
		life = 5;
	}
	barrier();

	vel += vel * delta;
	pos += vel * delta;
	life -= 1 * delta;


	positions[index] = pos;
	velocities[index] = vel;
	lives[index] = life;
	colors[index] = color;
}
