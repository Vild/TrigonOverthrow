#version 440 core
layout(local_size_x = 1, local_size_y = 1024, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D pos_input;
layout(rgba32f, binding = 1) uniform image2D vel_input;

struct Emitter {
	vec3 direction;
	vec3 position;
};

#define MAX_EMITTER_COUNT 64
uniform float delta;
uniform int emitterCount;
uniform Emitter emitters[MAX_EMITTER_COUNT];

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main(){
	ivec2 pixel_Coords = ivec2(gl_GlobalInvocationID).xy;
	vec3 vel = imageLoad(pos_input, pixel_Coords).xyz;
	vec3 pos = imageLoad(vel_input, pixel_Coords).xyz;
	float life = imageLoad(pos_input, pixel_Coords).w;

	life -= 1.0f * delta;
	if(life <= 0){
		vel = emitters[int(gl_LocalInvocationIndex + gl_WorkGroupID.x / emitterCount)].direction;
		pos = emitters[int(gl_LocalInvocationIndex + gl_WorkGroupID.x / emitterCount)].position;
		//life = rand(pixel_Coords);
		life = 5;
	}
	barrier();
	vel += vec3(0, 0.1f, 0) * delta;
	pos += vel * delta;

	imageStore(pos_input, pixel_Coords, vec4(pos, life));
	imageStore(vel_input, pixel_Coords, vec4(vel, 0));
}
